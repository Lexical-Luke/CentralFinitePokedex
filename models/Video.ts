/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Detection } from './Detection';
import {
    DetectionFromJSON,
    DetectionFromJSONTyped,
    DetectionToJSON,
} from './Detection';
import type { Frame } from './Frame';
import {
    FrameFromJSON,
    FrameFromJSONTyped,
    FrameToJSON,
} from './Frame';

/**
 * 
 * @export
 * @interface Video
 */
export interface Video {
    /**
     * 
     * @type {Array<Detection>}
     * @memberof Video
     */
    detections: Array<Detection>;
    /**
     * 
     * @type {Array<Frame>}
     * @memberof Video
     */
    frames: Array<Frame>;
    /**
     * 
     * @type {number}
     * @memberof Video
     */
    fps?: number;
    /**
     * 
     * @type {number}
     * @memberof Video
     */
    timing?: number;
    /**
     * 
     * @type {string}
     * @memberof Video
     */
    device?: string;
}

/**
 * Check if a given object implements the Video interface.
 */
export function instanceOfVideo(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "detections" in value;
    isInstance = isInstance && "frames" in value;

    return isInstance;
}

export function VideoFromJSON(json: any): Video {
    return VideoFromJSONTyped(json, false);
}

export function VideoFromJSONTyped(json: any, ignoreDiscriminator: boolean): Video {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'detections': ((json['detections'] as Array<any>).map(DetectionFromJSON)),
        'frames': ((json['frames'] as Array<any>).map(FrameFromJSON)),
        'fps': !exists(json, 'fps') ? undefined : json['fps'],
        'timing': !exists(json, 'timing') ? undefined : json['timing'],
        'device': !exists(json, 'device') ? undefined : json['device'],
    };
}

export function VideoToJSON(value?: Video | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'detections': ((value.detections as Array<any>).map(DetectionToJSON)),
        'frames': ((value.frames as Array<any>).map(FrameToJSON)),
        'fps': value.fps,
        'timing': value.timing,
        'device': value.device,
    };
}

